# .github/workflows/unlock-state.yml
name: Unlock Terraform State (One-Time)

on:
  workflow_dispatch:
    inputs:
      lock_id:
        description: 'Lock ID to force unlock'
        required: true
        default: 'b7d9b982-940f-e349-b2b5-325fbef8cd4f'
        type: string
      confirm:
        description: 'Type YES to confirm unlock'
        required: true
        type: string

env:
  AWS_REGION: 'us-east-1'

jobs:
  unlock:
    name: 'Force Unlock State'
    runs-on: ubuntu-latest
    environment: dev
    
    defaults:
      run:
        shell: bash
    
    steps:
    - name: Validate Confirmation
      run: |
        if [ "${{ inputs.confirm }}" != "YES" ]; then
          echo "❌ Confirmation not provided. You must type 'YES' to proceed."
          exit 1
        fi
        echo "✅ Confirmation received"
    
    - name: Checkout
      uses: actions/checkout@v4
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
    
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: '1.5.0'
    
    - name: Navigate to Terraform Directory
      run: |
        echo "Current directory: $(pwd)"
        echo "Contents: $(ls -la)"
        if [ -d ".aws/terraform" ]; then
          cd .aws/terraform
          echo "Found .aws/terraform directory"
        elif [ -d "terraform" ]; then
          cd terraform
          echo "Found terraform directory"
        else
          echo "Available directories:"
          find . -name "*.tf" -type f 2>/dev/null | head -10
          exit 1
        fi
    
    - name: Terraform Init
      run: |
        if [ -d ".aws/terraform" ]; then
          cd .aws/terraform
        elif [ -d "terraform" ]; then
          cd terraform
        fi
        terraform init
    
    - name: Force Unlock Terraform State (Skip Lock Check)
      run: |
        if [ -d ".aws/terraform" ]; then
          cd .aws/terraform
        elif [ -d "terraform" ]; then
          cd terraform
        fi
        echo "🔓 Attempting Terraform force unlock..."
        terraform force-unlock -force "${{ inputs.lock_id }}"
        echo "✅ Force unlock completed"
    
    - name: Direct DynamoDB Lock Removal (Backup)
      if: failure()
      run: |
        echo "🔧 Removing lock directly from DynamoDB..."
        aws dynamodb delete-item \
          --table-name terraform-state-lock \
          --key '{"LockID":{"S":"${{ inputs.lock_id }}"}}' \
          --region ${{ env.AWS_REGION }}
        echo "✅ Lock removed directly from DynamoDB"
    
    - name: Verify Unlock
      continue-on-error: true
      run: |
        if [ -d ".aws/terraform" ]; then
          cd .aws/terraform
        elif [ -d "terraform" ]; then
          cd terraform
        fi
        echo "🧪 Verifying unlock with a simple validation..."
        terraform validate || echo "Validation failed, but that's okay for unlock verification"
        echo "✅ Verification attempted"
    
    - name: Summary
      run: |
        echo "## 🔓 State Lock Removal Complete!" >> $GITHUB_STEP_SUMMARY
        echo "Lock ID \`${{ inputs.lock_id }}\` has been force-removed." >> $GITHUB_STEP_SUMMARY
        echo "You can now run your normal deployment workflow." >> $GITHUB_STEP_SUMMARY